{"version":3,"sources":["results.jsx","App.js","login.jsx","serviceWorker.js","index.js"],"names":["Results","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uri","bind","assertThisInitialized","window","open","props","_this2","react_default","a","createElement","className","artistInfo","map","value","index","key","href","rel","target","artist","albumName","onClick","Component","spotifyApi","SpotifyWebApi","App","state","showResults","click","user","userLogin","nowPlaying","name","albumArt","artisInfo","showResultsFunction","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","artists","info","external_urls","spotify","console","log","_this3","loggedIn","getNowPlaying","alt","src","sytle","width","results","Login","token","getHashParams","access_token","setAccessToken","e","hashParams","r","q","location","hash","substring","exec","decodeURIComponent","getMe","display_name","src_App_0","Boolean","hostname","match","ReactDOM","render","login","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8871a06b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass  Results extends Component {\n\n    constructor(){\n        super();\n        this.uri = this.uri.bind(this);\n    }\n\n    uri(){\n        window.open('https://embed.spotify.com/?uri=' +  this.props.uri + '&view=coverart');\n      }\n\n    render() { \n\n    \n        return (\n\n            <div> \n\n                <div className=\"result\"> Artists:\n                    {this.props.artistInfo.map((value,index) => <a key={index} className=\"linkArtist\" href={value} rel=\"noopener noreferrer\" target=\"_blank\"> {this.props.artist[index]}</a>)}\n                </div>\n                \n                \n              \n                <div className=\"result\">Album Name: {this.props.albumName}</div>\n\n                <div className=\"result\">\n                    <button onClick={this.uri} className=\"btn btn-outline-danger button\">\n                        Click to hear Music\n                    </button>\n                </div>\n            </div> \n\n        );\n    }\n}\n \nexport default Results;","import React, { Component } from 'react';\nimport './App.css';\nimport Results from './results';\n//import Login from './login'\n\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst  spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    /*const params = this.getHashParams();\n\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }*/\n    this.state = {\n      //loggedIn: token ? true : false,\n      showResults: false,\n      click :false,\n      user:'',\n      userLogin:false,\n      nowPlaying: { \n        name: 'Not Checked', \n        albumArt: '' ,\n        artist : [] ,\n        artisInfo: [],\n        uri : '' ,\n        albumName: 'Not Checked',\n    \n      }\n    }\n    this.showResultsFunction = this.showResultsFunction.bind(this);\n    \n  }\n\n  /*getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n    return hashParams;\n    }*/\n\n    // This will use a library\n    getNowPlaying() {\n      spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          click: true,\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[1].url,\n            artist:  response.item.artists.map(name => name.name + \" \"),  //response.item.artists[0].name, \n            artistInfo: response.item.artists.map(info => info.external_urls.spotify),\n            uri:  response.item.uri,\n            albumName: response.item.album.name,\n          }\n        });\n        console.log(response);\n      })\n    }\n\n    showResultsFunction(){\n      this.setState({\n        showResults : true\n      }); \n    }\n\n  \n\n\n    render(){\n      return (\n        <div className=\"App\">\n          {/*<a href='http://localhost:8888'className=\"btn btn-danger\"> Login to Spotify </a> */}\n     \n          <br/>\n\n\n\n          {this.props.loggedIn &&\n            <button className=\"btn btn-info click\" onClick={() => this.getNowPlaying()}>\n              Check Now Playing\n            </button>  \n          }\n\n        \n          <div className=\"result\"> Now playing: {this.state.nowPlaying.name}</div>\n          <div className=\"imgDiv\"><img className=\"imgAlbum\" alt={this.state.nowPlaying.albumArt} src={this.state.nowPlaying.albumArt} sytle={{width:150}}/></div>\n          \n\n        {this.state.click ? <Results artist= {this.state.nowPlaying.artist} artistInfo={this.state.nowPlaying.artistInfo} \n        uri={this.state.nowPlaying.uri} albumName={this.state.nowPlaying.albumName}/ > : null}\n        \n        </div>\n\n      );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport App from './App';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst  spotifyApi = new SpotifyWebApi();\n\n\nclass Login extends Component {\n    \n    constructor(){\n        super();\n        const params = this.getHashParams();\n    \n        const token = params.access_token;\n        if (token) {\n          spotifyApi.setAccessToken(token);\n        }\n        this.state = {\n          loggedIn: token ? true : false,        \n          }\n        \n        this.user= this.user.bind(this);\n      }\n\n      getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n            hashParams[e[1]] = decodeURIComponent(e[2]);\n          }\n        return hashParams;\n        }\n\n\n        user(){\n            spotifyApi.getMe()\n            .then((response) => {\n            this.setState({\n                user: response.display_name\n            });\n    \n            })\n            console.log(this.state.user);\n        }\n\n    \n    render() { \n        return ( \n            <div>\n            <a href='http://localhost:8888'className=\"btn btn-danger\"> Login to Spotify </a> \n        \n            {/*this.state.loggedIn && this.user()*/} \n            {this.state.loggedIn && <App loggedIn={this.state.loggedIn}/>}\n            </div>\n    \n         );\n    }\n}\n \nexport default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Login from './login'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// changed <App/> to <Login />\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}